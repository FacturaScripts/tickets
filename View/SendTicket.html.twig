{% extends 'Master/MenuTemplate.html.twig' %}

{% block body %}
    <div class="container" style="margin-top: -60px;">
        <div class="row">
            <div class="col-12">
                <form action="{{ fsc.url() }}" method="post" id="print-form">
                    <input type="hidden" name="action" value="print"/>
                    <input type="hidden" name="modelClassName" value="{{ fsc.modelClassName }}"/>
                    <input type="hidden" name="modelCode" value="{{ fsc.modelCode }}"/>
                    <div class="card shadow mb-4">
                        <div class="card-body">
                            <h1 class="h2 mb-3">
                                <i class="{{ fsc.getPageData().icon }}"></i> {{ fsc.title }}
                                <small id="qzStatusIndicator" class="ml-3 badge badge-warning d-none">{{ trans('qz-tray-disconnected') }}</small>
                            </h1>
                            <div class="form-group">
                                <label for="format-select">{{ trans('ticket-format') }}</label>
                                <select name="format" id="format-select" class="form-control" required>
                                    {% for format in fsc.getFormats(fsc.modelClassName) %}
                                        <option value="{{ format.className }}">{{ trans(format.label) }}</option>
                                    {% endfor %}
                                </select>
                            </div>
                            <div class="form-group">
                                <label for="printer-select">{{ trans('printer') }}</label>
                                <select name="printer" id="printer-select" class="form-control" required>
                                    <option value="">{{ trans('select-a-printer') }}</option>
                                    {% for printer in fsc.printers %}
                                        <option value="{{ printer.id }}" data-type="{{ printer.type }}">{{ printer.name }}</option>
                                    {% endfor %}
                                </select>
                            </div>
                            <div class="text-right">
                                <button type="submit" class="btn btn-primary">
                                    <i class="fa-solid fa-print"></i> {{ trans('print') }}
                                </button>
                            </div>
                        </div>
                    </div>
                    <div class="card shadow mb-5">
                        <div class="card-body">
                            <h2 class="h3">
                                <i class="fa-solid fa-print"></i> {{ trans('connect-a-printer') }}
                            </h2>
                            <p>{{ trans('connect-a-printer-p') }}</p>
                            <a href="{{ 'ListTicketPrinter'|url }}" class="btn btn-secondary">
                                {{ trans('printers') }}
                            </a>
                        </div>
                    </div>
                </form>
            </div>
        </div>
    </div>
{% endblock %}

{% block scripts %}
    {{ parent() }}
    <script type="text/javascript" src="{{ asset('Plugins/Etiquetas/node_modules/qz-tray/qz-tray.js') }}"></script>
    <script type="text/javascript">
        let qzTrayConnected = false;

        function updateQZStatusIndicator(isConnected) {
            qzTrayConnected = isConnected;
            const indicator = document.getElementById('qzStatusIndicator');
            if (!indicator) return;

            if (isConnected) {
                indicator.textContent = '{{ trans('qz-tray-connected') }}';
                indicator.classList.remove('badge-warning', 'badge-danger');
                indicator.classList.add('badge-success');
            } else {
                indicator.textContent = '{{ trans('qz-tray-disconnected') }}';
                indicator.classList.remove('badge-success');
                indicator.classList.add('badge-warning');
            }
        }

        function initQZ() {
            if (typeof qz === 'undefined' || !qz.websocket) {
                setTimeout(initQZ, 500);
                return;
            }

            if (qz.websocket.isActive()) {
                updateQZStatusIndicator(true);
                return;
            }

            qz.websocket.connect().then(() => {
                updateQZStatusIndicator(true);
            }).catch(err => {
                updateQZStatusIndicator(false);
                console.error(err);
            });

            qz.websocket.setClosedCallbacks(() => updateQZStatusIndicator(false));
            qz.websocket.setErrorCallbacks(() => updateQZStatusIndicator(false));
        }

        function handleFormSubmit(event) {
            event.preventDefault();
            const form = event.target;
            const printerSelect = form.querySelector('#printer-select');
            const selectedOption = printerSelect.options[printerSelect.selectedIndex];
            if (!selectedOption || !selectedOption.value) {
                alert('{{ trans('select-a-printer') }}');
                return;
            }
            
            const printerType = selectedOption.dataset.type;

            if (printerType === 'qztray') {
                if (!qzTrayConnected) {
                    alert('{{ trans('qz-tray-not-connected-before-print') }}');
                    return;
                }

                const formData = new FormData(form);
                fetch(form.action, {
                    method: 'POST',
                    body: new URLSearchParams(formData)
                })
                .then(response => response.json())
                .then(data => {
                    if (data.escpos_data) {
                        const config = qz.configs.create(selectedOption.text);
                        const printData = [{
                            type: 'raw',
                            format: 'base64',
                            data: data.escpos_data
                        }];
                        qz.print(config, printData).catch(err => {
                            alert('{{ trans('error-printing') }}: ' + err);
                            console.error(err);
                        });
                    } else {
                        alert(data.message || '{{ trans('no-valid-receipt-data-received') }}');
                    }
                })
                .catch(err => {
                    alert('{{ trans('error-ajax-preview') }} ' + err);
                    console.error(err);
                });

            } else {
                form.submit();
            }
        }

        $(document).ready(function() {
            initQZ();

            $('#printer-select').on('change', function() {
                const selectedOption = this.options[this.selectedIndex];
                const indicator = $('#qzStatusIndicator');
                if (selectedOption.dataset.type === 'qztray') {
                    indicator.removeClass('d-none');
                    if (!qz.websocket.isActive()) {
                        initQZ();
                    }
                } else {
                    indicator.addClass('d-none');
                }
            });

            $('#print-form').on('submit', handleFormSubmit);
        });
    </script>
{% endblock %}

